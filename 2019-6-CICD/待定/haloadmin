import groovy.json.JsonOutput

ansiColor('xterm') {

 properties([
        buildDiscarder(logRotator(daysToKeepStr: '', numToKeepStr: '100', artifactDaysToKeepStr: '', artifactNumToKeepStr: '1')),
        disableConcurrentBuilds(),
        [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
        parameters([
           string(name: 'JAVA_VERSION', defaultValue: '10', trim: true, description: 'Java版本'),
            string(name: 'BRANCH', defaultValue: 'release/20190620', trim: true, description: '代码分支'),
            string(name: 'REPO_URL', defaultValue: 'ssh://git@code.bkjk-inc.com:32222/halo/halo-admin.git', trim: true, description: '代码仓库地址'),
            string(name: 'CODE_ROOT', defaultValue: '.', trim: true, description: '代码目录'),
            string(name: 'SONAR_MVN_CMD', defaultValue: 'mvn sonar:sonar -Dsonar.host.url=https://sonarqube.ocean.bkjk-inc.com -Dsonar.login=ea48c6be9103b8e09976e46242f082852c3aa3b2', trim: true, description: 'sonar命令'),
            string(name: 'BUILD_CMD', defaultValue: 'mvn -U clean package -Dmaven.test.skip=true', trim: true, description: '编译命令'),
            string(name: 'SKYWALKING_TAR', defaultValue: 'skywalking-agent-rt20190218.tar', trim: true, description: 'SkyWalking包'),
            string(name: 'IMAGE', defaultValue: 'harbor.ocean.bkjk-inc.com/bkjk-halo/haloadmin', trim: true, description: '目标镜像'),
            string(name: 'IMAGE_VERSION', defaultValue: 'v0.1', trim: true, description: '	IMAGE_VERSION'),
            string(name: 'BASE_IMAGE', defaultValue: 'harbor.ocean.bkjk-inc.com/dockerfiles/sjre:10', trim: true, description: '基础镜像'),
            string(name: 'SRC_PKG', defaultValue: './halo-admin-web/target/halo-admin.jar', trim: true, description: 'src pkg'),
            string(name: 'DST_PKG', defaultValue: 'haloadmin.jar', trim: true, description: 'dst pkg'),
            booleanParam(name: 'CHECKARG_ENABLE', defaultValue: true, description: 'Stage:CheckArg的启用标识'),
            booleanParam(name: 'CLONECODE_ENABLE', defaultValue: true, description: 'Stage:CloneCode的启用标识'),
            booleanParam(name: 'SONARCHECK_ENABLE', defaultValue: true, description: 'Stage:SonarCheck的启用标识'),
            booleanParam(name: 'COMPILECODE_ENABLE', defaultValue: true, description: 'Stage:CompileCode的启用标识'),
            booleanParam(name: 'BUILDIMAGE_ENABLE', defaultValue: true, description: 'Stage:BuildImage的启用标识')
        ]),
    ])

node() {
   


    String globalVersionImage = params.IMAGE + ":" + params.IMAGE_VERSION + "." + BUILD_ID
            String globalCredentialsID = '075b9b9b-85d5-4619-be19-40872b8d96ad'
            String globalDockerRegistry = "https://harbor.ocean.bkjk-inc.com"
            String globalBaseImage=params.BASE_IMAGE
            String globalSrcPkg = params.SRC_PKG
            String globalDstPkg = params.DST_PKG
            Boolean globalNoCache = false
            String globalShortCommit = ""
            String globalGitCommit = ""
            String globalSkyWalkingTar = params.SKYWALKING_TAR
            String globalCommitDate = ""


    def callbackBody = [
        app: env.JOB_BASE_NAME,
        buildID: env.BUILD_ID.toInteger(),
        status: "SUCCESS",
    ]

    try {
       

stage('CheckArg') {
	if (params.CHECKARG_ENABLE) {
		if (params.JAVA_VERSION == '10') {
        env.JAVA_HOME = tool name: 'java-10jdk', type: 'jdk'
    } else {
        env.JAVA_HOME = tool name: 'java-8jdk', type: 'jdk'
    }
    env.GRADLE_HOME = tool name: 'gradle-4', type: 'gradle'
    env.M2_HOME = tool name: 'maven-3', type: 'maven'
    env.NODE_HOME = tool name: 'node-8.11', type: 'nodejs'
    env.PATH = "${env.NODE_HOME}/bin:${env.M2_HOME}/bin:${env.GRADLE_HOME}/bin:${env.JAVA_HOME}/bin:${env.PATH}"

		
		
callbackBody.status = "BUILDING"
callbackBody.stage = "CheckArg"
httpRequest (
            url: "http://10.10.145.56:8080/pub/jenkins/callback",
            httpMode: 'POST',
            ignoreSslErrors: true,
            contentType: 'APPLICATION_JSON',
            timeout: 90,
            requestBody: JsonOutput.toJson(callbackBody),
            responseHandle: 'NONE'
)
	} else {
		println "跳过CheckArg阶段"
	}
}

stage('CloneCode') {
	if (params.CLONECODE_ENABLE) {
		checkout([
        $class: 'GitSCM', branches:
         [[name: params.BRANCH]],
         doGenerateSubmoduleConfigurations: false,
         extensions: [],
         submoduleCfg: [],
         userRemoteConfigs: [[credentialsId: 'c9fa0ecc-6030-49ad-9877-dbecbf05a34e', url: params.REPO_URL]]]
)
        
globalShortCommit = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
globalGitCommit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
globalCommitDate = sh(script: "git log ${globalGitCommit} -n 1 --pretty=format:\"%cd\" --date=iso", , returnStdout: true).trim()

		
		
callbackBody.status = "BUILDING"
callbackBody.stage = "CloneCode"
httpRequest (
            url: "http://10.10.145.56:8080/pub/jenkins/callback",
            httpMode: 'POST',
            ignoreSslErrors: true,
            contentType: 'APPLICATION_JSON',
            timeout: 90,
            requestBody: JsonOutput.toJson(callbackBody),
            responseHandle: 'NONE'
)
	} else {
		println "跳过CloneCode阶段"
	}
}

stage('SonarCheck') {
	if (params.SONARCHECK_ENABLE) {
		docker.withTool("docker-18") {
        docker.withRegistry("${globalDockerRegistry}", "${globalCredentialsID}") {
            sh("""
            set -e
            
            echo ${JAVA_HOME}; java -version ; mvn -v ; gradle -v; node -v
            
            cd ${CODE_ROOT} && ${SONAR_MVN_CMD}
            

            """)
        }
    }
		
		
callbackBody.status = "BUILDING"
callbackBody.stage = "SonarCheck"
httpRequest (
            url: "http://10.10.145.56:8080/pub/jenkins/callback",
            httpMode: 'POST',
            ignoreSslErrors: true,
            contentType: 'APPLICATION_JSON',
            timeout: 90,
            requestBody: JsonOutput.toJson(callbackBody),
            responseHandle: 'NONE'
)
	} else {
		println "跳过SonarCheck阶段"
	}
}

stage('CompileCode') {
	if (params.COMPILECODE_ENABLE) {
		docker.withTool("docker-18") {
        docker.withRegistry("${globalDockerRegistry}", "${globalCredentialsID}") {
            sh("""
            set -e
            
            echo ${JAVA_HOME}; java -version ; mvn -v ; gradle -v; node -v
            
            cd ${CODE_ROOT} && ${BUILD_CMD}
            
            if [ -f /tmp/${SKYWALKING_TAR} ]; then
              cp /tmp/${SKYWALKING_TAR} ./  && touch /tmp/${SKYWALKING_TAR}
            else
              curl -o /tmp/${SKYWALKING_TAR} https://public-downloads-1256212241.cos.ap-beijing.myqcloud.com/${SKYWALKING_TAR} && \
              cp /tmp/${SKYWALKING_TAR} ./
            fi

            """)
        }
    }
		
		
callbackBody.status = "BUILDING"
callbackBody.stage = "CompileCode"
httpRequest (
            url: "http://10.10.145.56:8080/pub/jenkins/callback",
            httpMode: 'POST',
            ignoreSslErrors: true,
            contentType: 'APPLICATION_JSON',
            timeout: 90,
            requestBody: JsonOutput.toJson(callbackBody),
            responseHandle: 'NONE'
)
	} else {
		println "跳过CompileCode阶段"
	}
}

stage('BuildImage') {
	if (params.BUILDIMAGE_ENABLE) {
		docker.withTool("docker-18") {
        docker.withRegistry("${globalDockerRegistry}", "${globalCredentialsID}") {
          sh("""
            cd ${CODE_ROOT} 
            echo "FROM ${globalBaseImage}" > Dockerfile
            echo "COPY ${globalSrcPkg} ${globalDstPkg}" >> Dockerfile
            echo "ADD ${globalSkyWalkingTar} ." >> Dockerfile
            echo "ENV GIT_COMMIT=${globalGitCommit} BUILD_TIME=`date +%Y-%m-%d_%H:%M:%S`" >> Dockerfile
            
            echo "LABEL GIT_COMMIT=${globalGitCommit} COMMIT_DATE=\\"${globalCommitDate}\\" BUILD_TIME=`date +%Y-%m-%d_%H:%M:%S` GIT_BRANCH=${params.BRANCH}"
            echo "LABEL GIT_COMMIT=${globalGitCommit} COMMIT_DATE=\\"${globalCommitDate}\\" BUILD_TIME=`date +%Y-%m-%d_%H:%M:%S` GIT_BRANCH=${params.BRANCH}" >> Dockerfile
            echo -ne '*\n!'${globalSrcPkg}'\n!${globalSkyWalkingTar}\n' > .dockerignore
            echo .git >> .dockerignore
            cat Dockerfile
            docker pull ${globalBaseImage} && docker build . --no-cache=${globalNoCache} -t ${globalVersionImage} && docker push ${globalVersionImage}
            """)
        }
    }
		
		
callbackBody.status = "BUILDING"
callbackBody.stage = "BuildImage"
httpRequest (
            url: "http://10.10.145.56:8080/pub/jenkins/callback",
            httpMode: 'POST',
            ignoreSslErrors: true,
            contentType: 'APPLICATION_JSON',
            timeout: 90,
            requestBody: JsonOutput.toJson(callbackBody),
            responseHandle: 'NONE'
)
	} else {
		println "跳过BuildImage阶段"
	}
}
	} catch (err) {
	    callbackBody.status = "FAILURE"
	    callbackBody.error = err.getMessage()
        httpRequest (
            url: "http://10.10.145.56:8080/pub/jenkins/callback",
            httpMode: 'POST',
            ignoreSslErrors: true,
            contentType: 'APPLICATION_JSON',
            timeout: 90,
            requestBody: JsonOutput.toJson(callbackBody),
            responseHandle: 'NONE'
        )
        throw err
    }
}
}