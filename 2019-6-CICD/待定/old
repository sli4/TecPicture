import groovy.json.JsonOutput

ansiColor('xterm') {

 properties([
        buildDiscarder(logRotator(daysToKeepStr: '', numToKeepStr: '100', artifactDaysToKeepStr: '', artifactNumToKeepStr: '1')),
        disableConcurrentBuilds(),
        [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
        parameters([
           string(name: 'DIST_DIR', defaultValue: 'dist', trim: true, description: 'dist dir'),
            string(name: 'BASE_IMAGE', defaultValue: 'harbor.ocean.bkjk-inc.com/base/nginx-spa:1.14-alpine', trim: true, description: '基础镜像'),
            string(name: 'REPO_URL', defaultValue: 'ssh://git@code.bkjk-inc.com:32222/hotpot/hotpotservice.git', trim: true, description: '仓库地址'),
            booleanParam(name: 'NOCACHE', defaultValue: false, description: 'no cache'),
            string(name: 'IMAGE', defaultValue: 'harbor.ocean.bkjk-inc.com/bkjk-hotpot/hotpotfrontend:dev-dev', trim: true, description: '目标镜像'),
            string(name: 'CODE_ROOT', defaultValue: './frontend-ui', trim: true, description: '.'),
            string(name: 'NODE_VERSION', defaultValue: '8', trim: true, description: 'nodejs version'),
            string(name: 'BRANCH', defaultValue: 'dev', trim: true, description: '分支'),
            string(name: 'BUILD_CMD', defaultValue: 'npm install && npm run build:dev', trim: true, description: '应用构建命令'),
            string(name: 'REPO_NAME', defaultValue: 'hotpotservice', trim: true, description: 'repo name'),
            string(name: 'ENV', defaultValue: 'dev', trim: true, description: '构建环境')
        ]),
    ])

node() {
   


    


    def callbackBody = [
        app: env.JOB_BASE_NAME,
        buildID: env.BUILD_ID.toInteger(),
        status: "SUCCESS",
    ]

    try {
       
        stage('Spinaker') {
String DOCKER_REGISTRY = "https://harbor.ocean.bkjk-inc.com"
    String CREDENTIALS_ID = '075b9b9b-85d5-4619-be19-40872b8d96ad'

    switch (params.NODE_VERSION) {
        case '10':
            env.NODE_HOME = tool name: 'node-10.7', type: 'nodejs'
            break
        case '9':
            env.NODE_HOME = tool name: 'node-9.4', type: 'nodejs'
            break
        case '6':
            env.NODE_HOME = tool name: 'node-6.14', type: 'nodejs'
            break
        default:
            env.NODE_HOME = tool name: 'node-8.11', type: 'nodejs'
            break
    }

    env.PATH = "${env.NODE_HOME}/bin:${env.PATH}"

    println "Start!!!"

    JOB_ROOT = pwd()
    // NODE_HOME = "/opt/node" + NODE_VERSION
    
    shortCommit = ""
    dir(REPO_NAME) {
        checkout([
                $class: 'GitSCM', branches:
                 [[name: params.BRANCH]],
                 doGenerateSubmoduleConfigurations: false,
                 extensions: [],
                 submoduleCfg: [],
                 userRemoteConfigs: [[credentialsId: 'c9fa0ecc-6030-49ad-9877-dbecbf05a34e', url: params.REPO_URL]]]
        )
        shortCommit = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
    }

    docker.withTool("docker-18") {
        docker.withRegistry("${DOCKER_REGISTRY}", "${CREDENTIALS_ID}") {
            sh("""
            set -e
            
            export NODE_ENV=${ENV}
            echo ${NODE_HOME}; node -v ; npm -v
            
            cd ${REPO_NAME} && cd ${CODE_ROOT} && ${BUILD_CMD}

            echo "FROM ${BASE_IMAGE}" > Dockerfile
            echo "ENV GIT_COMMIT=`git rev-parse HEAD` BUILD_TIME=`date +%Y-%m-%d_%H:%M:%S`" >> Dockerfile
            echo "COPY ${DIST_DIR}/ ./" >> Dockerfile

            echo -ne '*\n!'${DIST_DIR}'\n' > .dockerignore
            echo .git >> .dockerignore
            docker build . --no-cache=${NOCACHE} -t ${IMAGE} && docker push ${IMAGE}
            docker tag ${IMAGE} ${IMAGE}--${shortCommit}
            docker push ${IMAGE}--${shortCommit}

            """)
        }
    }
        }
	} catch (err) {
	    callbackBody.status = "FAILURE"
	    callbackBody.error = err.getMessage()
        httpRequest (
            url: "http://10.11.209.103:8080/pub/jenkins/callback",
            httpMode: 'POST',
            ignoreSslErrors: true,
            contentType: 'APPLICATION_JSON',
            timeout: 90,
            requestBody: JsonOutput.toJson(callbackBody),
            responseHandle: 'NONE'
        )
        throw err
    }
}
}